{
  "language": "Solidity",
  "sources": {
    "contracts/TokenM.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\n// errors\nerror TokenM__NotEnoughETH();\n\ncontract TokenM {\n    // state variables\n    string public name; //name of the token\n    string public symbol; //Symbol of the token\n    uint8 public decimals = 18;\n    uint256 public totalSupply; // total suplly of token\n    uint256 public PRICE;\n    //address of user to amount mapping\n    mapping(address => uint256) public balance;\n\n    // Events\n    event TokenIssued(address indexed user, uint256 indexed amount);\n    event TokensTransferred(\n        address indexed sender,\n        address indexed receiver,\n        uint256 amount\n    );\n\n    // construcor\n    constructor(\n        string memory tokenName,\n        string memory tokenSymbol,\n        uint256 initialSupply,\n        uint256 price\n    ) {\n        name = tokenName;\n        symbol = tokenSymbol;\n        // since solidity dont work with decimals so to fix that we can convert token to lower units(such as Gwei)\n        totalSupply = initialSupply * 10 ** uint256(decimals);\n        PRICE = price;\n        //\n    }\n\n    function issueToken() public payable {\n        require(totalSupply >= 1e18);\n        require(msg.sender != address(0x0));\n        // Since the price of 1 TA is 0.8 ETH\n        if (msg.value < PRICE) {\n            revert TokenM__NotEnoughETH();\n        }\n\n        uint256 receievedAmount = msg.value;\n        uint256 tokensGenerated = (receievedAmount * 10 ** decimals) / PRICE;\n        balance[msg.sender] += tokensGenerated;\n        totalSupply -= tokensGenerated;\n        emit TokenIssued(msg.sender, tokensGenerated);\n    }\n\n    function transfer(\n        address to,\n        uint256 amount\n    ) public returns (bool success) {\n        // to should be a valid address\n        require(to != address(0x0));\n        // also check if the sender has enough tokens in his/her account to send\n        require(balance[msg.sender] >= amount);\n\n        balance[msg.sender] -= amount;\n        balance[to] += amount;\n        emit TokensTransferred(msg.sender, to, amount);\n        return true;\n    }\n\n    function balanceOf(address user) public view returns (uint256) {\n        require(user != address(0x0));\n        return balance[user];\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}